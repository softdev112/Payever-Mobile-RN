// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`modules/auth/screens/RegCompletedDialog RegCompletedDialog should render correctly if auth.error does not set 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFF",
            "borderBottomColor": "#e1e1e1",
            "borderBottomWidth": 1,
            "elevation": 8,
            "flexDirection": "row",
            "height": 55,
            "justifyContent": "flex-end",
            "marginTop": 15,
            "paddingHorizontal": 18,
            "zIndex": 1000,
          },
          Object {
            "paddingHorizontal": 9,
          },
        ],
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "alignItems": "center",
            "bottom": 0,
            "flexDirection": "row",
            "justifyContent": "flex-start",
            "left": 18,
            "position": "absolute",
            "top": 0,
            "zIndex": 1002,
          },
          Object {
            "left": 9,
          },
        ]
      }
    >
      <View
        accessibilityComponentType="button"
        accessibilityLabel={undefined}
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        hitSlop={
          Object {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        isTVSelectable={true}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flexDirection": "row",
            "justifyContent": "flex-end",
            "opacity": 1,
            "padding": 6,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          disabled={false}
          ellipsizeMode="tail"
          source="icon-x-24"
          style={
            Array [
              Object {
                "fontFamily": "payeverIcons",
                "fontSize": 24,
              },
              Array [
                Object {
                  "fontFamily": "payeverIcons",
                  "fontSize": 24,
                },
                Array [
                  Object {
                    "height": 24,
                    "width": 24,
                  },
                  Object {
                    "color": "#0084ff",
                  },
                  Array [
                    undefined,
                    Object {
                      "color": "#000",
                    },
                  ],
                ],
              ],
            ]
          }
          touchStyle={
            Object {
              "alignItems": "center",
              "borderColor": "blue",
              "borderWidth": 1,
              "justifyContent": "center",
            }
          }
        >
          î¬“
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          numberOfLines={1}
          style={
            Array [
              Object {
                "color": "#0084ff",
                "fontSize": 16,
                "marginLeft": 2,
              },
              Object {
                "fontSize": 16,
                "fontWeight": "400",
                "marginLeft": 2,
              },
            ]
          }
        />
      </View>
    </View>
    <View
      style={
        Object {
          "alignItems": "center",
          "bottom": 0,
          "flexDirection": "row",
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "zIndex": 1001,
        }
      }
    >
      <View
        accessibilityComponentType="button"
        accessibilityLabel={undefined}
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        hitSlop={
          Object {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        isTVSelectable={true}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flexDirection": "row",
            "justifyContent": "center",
            "opacity": 1,
            "padding": 6,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          numberOfLines={1}
          style={
            Array [
              Object {
                "color": "#000",
                "fontSize": 18,
                "fontWeight": "300",
                "textAlign": "center",
              },
              Object {},
            ]
          }
        >
          Add New User
        </Text>
      </View>
    </View>
    <Image
      source={1}
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "height": null,
          "justifyContent": "flex-end",
          "paddingLeft": 20,
          "resizeMode": "stretch",
          "width": null,
          "zIndex": 1002,
        }
      }
    >
      <View
        accessibilityComponentType="button"
        accessibilityLabel={undefined}
        accessibilityTraits={
          Array [
            "button",
          ]
        }
        accessible={true}
        hitSlop={
          Object {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        isTVSelectable={true}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "flexDirection": "row",
            "justifyContent": "center",
            "opacity": 1,
            "padding": 6,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          numberOfLines={1}
          style={
            Array [
              Object {
                "color": "#0084ff",
                "fontSize": 16,
              },
              undefined,
            ]
          }
        >
          Sign Up
        </Text>
      </View>
    </Image>
  </View>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "justifyContent": "flex-start",
        "overflow": "hidden",
        "paddingHorizontal": 12,
      }
    }
    scrollEnabled={false}
  >
    <View>
      <FlatTextInput
        inputStyle={
          Object {
            "fontSize": 18,
          }
        }
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSubmitEditing={[Function]}
        placeholder="First Name"
        renderValidator={[Function]}
        returnKeyType="next"
        value=""
      />
      <FlatTextInput
        inputStyle={
          Object {
            "fontSize": 18,
          }
        }
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSubmitEditing={[Function]}
        placeholder="Last Name"
        renderValidator={[Function]}
        returnKeyType="next"
        value=""
      />
      <FlatTextInput
        inputStyle={
          Object {
            "fontSize": 18,
          }
        }
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSubmitEditing={[Function]}
        placeholder="Email Address"
        renderValidator={[Function]}
        returnKeyType="next"
        value=""
      />
      <FlatTextInput
        inputStyle={
          Object {
            "fontSize": 18,
          }
        }
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSubmitEditing={[Function]}
        placeholder="Password"
        renderValidator={[Function]}
        returnKeyType="next"
        secureTextEntry={true}
      />
      <FlatTextInput
        inputStyle={
          Object {
            "fontSize": 18,
          }
        }
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSubmitEditing={[Function]}
        placeholder="Confirm Password"
        renderValidator={[Function]}
        returnKeyType="done"
        secureTextEntry={true}
      />
    </View>
  </RCTScrollView>
</View>
`;
